waitfor() {
    shopt -s expand_aliases
    while true; do
        echo "Thank you for being lazy"
        echo "COMMAND: $2"
        echo "WATCHED FILES: $(echo $1)"
# The use of echo here forces the shell to perform globbing and expansions 
        inotifywait -e modify $(echo $1)
        echo "EXECUTING COMMAND"    
        $2  
        sleep 5
        clear
    done
}

# function that takes a list of usernames, and resets their passwords with randomly generated passwords, 
# and puts the password in their homedir must be run as root
generate_pw_for (){
  for username in "$@"; do
    pw=$(pwgen 15 1)
    passwd $username <<EOF
$pw
$pw
EOF
    echo "This is a randomly generated password courtesy of OSUOSL. Please delete this after you change your password
    " > /home/${username}/password.deleteme
    echo "$pw" >> /home/${username}/password.deleteme
  done
}

rmtw() {
  sed 's/\s*$//' "$1" > ${1}.bak mv ${1}.bak "$1" }

digs() {
  dig "$1" | grep -A 2 ANSWER
}

digx() {
  dig -x "$1" | grep -A 2 ANSWER
}

shady () {
  ssh-add ~/.ssh/id_rsa_$1
}

d() {
  cd $@ && ls
}

e(){
  $@ 2>&1 >/dev/null & disown
}

mistake() {
  git commit -a --amend <<EOF
:wq
EOF
  git push origin -f HEAD
}

decrypt_data_bag () {

  if [ "$#" -lt 2 ]; then
    echo "Need to supply two arguments"
    return 1
  fi 

  knife file decrypt ${1} -Fj --secret-file ~/.chef/encrypted_data_bag_secret > ${2}
}

encrypt_data_bag () {

  if [ "$#" -lt 2 ]; then
    echo "Need to supply two arguments"
    exit 1
  fi 

  knife file encrypt ${1} -Fj --secret-file ~/.chef/encrypted_data_bag_secret > ${2}
}

opendelete() {

  UUID_LIST=$(nova list | grep `whoami` | awk '{print $2}')

  if [ -z "$UUID_LIST" ]; then
    echo You have no openstack instances open
  else
    while read UUID; do
      nova delete $UUID &
    done <<< "$UUID_LIST"
  fi
}

blame() {
  nova list > nova_file
  for member in {kindlehl,jasonc,whitehet,doublej472,lance,jerryp,eldebrim,freefood}; do
    echo $member has $(grep $member nova_file | wc -l) openstack instances! 
  done
  rm nova_file
}


test_everything() {
  if ! [[ -d ./tests ]]; then
    mkdir ./tests
  fi
  rm -rf tests/*
  for suite in $(kitchen list | grep -v "^Instance" | awk '{print $1}'); do
    kitchen test $suite > tests/${suite}.output 2>&1 &
  done
}

getips() {
  for name in $(cat $1); do 
    echo $name -\> $(dig +short $name)
  done
}

gp() {
  if ! echo "$(git branch)" | grep '\* master' 2>&1 >/dev/null; then
    git push origin HEAD $@
  else
    echo 'You cannot push to master so conveniently. use "git push origin HEAD"'.
  fi
}
